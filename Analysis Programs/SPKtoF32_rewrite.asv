function SPKtoF32(file, varargin)

%
%SPKtoF32.m - OU Neural Engineering Lab, 2007
%
%   SPKtoF32 takes spike times and cluster assignments from neural
%   recordings stored in the *.SPK format and creates Brainware format
%   *.f32 spike time files for each cluster.
%
%   SPKtoF32(file) exports spike times and cluster assignments from a *.SPK
%   file using all function defaults.
%
%   SPKtoF32(...,'Property1',PropertyValue1,...) sets the values of any of 
%   the following optional export properties:
%
%   * 'Noise' - This option allows an user to export an *.f32 file for
%               spikes classified as noise with a cluster assignment of
%               zero, set with input values of 'On' or 'Off'.  The default
%               value is 'Off'.
%
%   * 'Order' - This option allows an user to export the 

n option to export a *.f32 file for spikes classified as
%               noise with a cluster assignment of zero, set with input
%               values of 'On' or 'Off'.  The default value is 'On'.
%
%   Last updated November 21, 2011, by Drew Sloan.


%First, we'll go through any changes to the optional properties the user might have entered.
export_noise = 0;                                                           %The default setting is not to export noise spikes.
export_order = 0;                                                           %The default setting is not list stimulus order in the *.f32 files. 
for i = 1:2:length(varargin)                                                %Step through each pair of variable arguments in.
    if length(varargin) <= i                                                %If any input argument doesn't have a matching value...
        error(['ERROR IN SPKTOF32: No corresponding input argument for ''' varargin{i} '''!']);     %Show an error.
    else                                                                    %Otherwise, if there's a matching value for the input argument...
        if strcmpi(varargin{i},'noise')                                     %If we're setting the 'noise' property...
            if ~ischar(varargin{i+1}) ||...
                    ~any(strcmpi(varargin{i+1},{'on''off'}))                %If the input value for the 'noise' property isn't a string or isn't 'On' or 'Off'...
                error('ERROR IN SPKTOF32: The ''Noise'' property must set to ''On'' or ''Off''.');  %Show an error.
            else                                                            %Otherwise, if the input value is 'on' or 'off'...
                export_noise = strcmpi(varargin{i+1},'on');                 %Set the export noise property according to the 'on' or 'off' value.
            end
        elseif strcmpi(varargin{i},'order')                                 %If we're setting the 'order' property...
            if ~ischar(varargin{i+1}) ||...
                    ~any(strcmpi(varargin{i+1},{'on''off'}))                %If the input value for the 'order' property isn't a string or isn't 'On' or 'Off'...
                error('ERROR IN SPKTOF32: The ''Noise'' property must set to ''On'' or ''Off''.');  %Show an error.
            else                                                            %Otherwise, if the input value is 'on' or 'off'...
                export_order = strcmpi(varargin{i+1},'on');                 %Set the export order property according to the 'on' or 'off' value.
            end
        else                                                                %If the input argument is not one of the recognized input arguments.
            error(['ERROR IN SPKTOF32: ''' varargin{i} ''' is not a recognized input argument!']);	%Show an error.
        end
    end
end

%The new file will have the same name, but with the *.f32 file extension.
disp(['Exporting spike times from "' file '"']);

%Before we export the spike times from the *.SPK file, we'll delete all
%previous *.f32 files to avoid mixing the results of spike-sorting
%sessions.
rootfile = file(1:end-4);                                                   %Find the root filename by removing the *.SPK extension.
delete([rootfile '*.f32']);                                                 %Delete all existing *.f32 files in this folder with this root filename.

%Ideally, we'd read in all the *.SPK data and then just write directly from
%the structure, but some files are so big that they'll bog down MatLab
%severely, so instead we'll just read in values and immediately write them
%without saving into a structure.
spkfid = fopen(file,'r');                                                   %Open the *.SPK file for reading.
fseek(spkfid,1,'bof');                                                      %Skip the daycode.
numchar = fread(spkfid,1,'int8');                                           %Number of characters in the rat's name.
fseek(spkfid,numchar,'cof');                                                %Skip the rat name.
spont_delay = int16(fread(spkfid,1,'int16'));                               %Read the spontaneous rate measurement delay (ms).
fseek(spkfid,4,'cof');                                                      %Skip the sampling rate.
num_spike_samples = fread(spkfid,1,'int16');                                %The number of spike shape samples.
numparams = fread(spkfid,1,'int8');                                         %Number of stimulus parameters.
for i = 1:numparams
    numchar = fread(spkfid,1,'int16');                                      %Number of characters in a parameter name.
    fseek(spkfid,numchar,'cof');                                            %Skip the parameter name.
end

%Now we'll step through the *.SPK file and kick out an *.f32 file for each
%cluster, including the noise cluster if noise exporting is enabled.
clusters = [];                                                              %Keep track of cluster numbers.
numsweeps = [];                                                             %Keep track of how many sweeps there are for each stimulus.
params = [];                                                                %Create a matrix to hold stimulus parameters.
order = [];                                                                 %Make a matrix to hold the 
while ~feof(spkfid)                                                         %Loop until the end of the file.
    stim = fread(spkfid,1,'int16');                                         %Read in the stimulus index.
    try                                                                     %Try to read in a sweep.  If there's an error, it's probably due to a corrupted file.
        if ~isempty(stim)                                                   %If the stimulus index isn't empty, and we're not at the end of the file...
            sweeplength(stim) = fread(spkfid,1,'float32');                  %Read in the sweeplength, in seconds.
            params(stim,:) = fread(spkfid,numparams,'float32');             %Read in the parameter values.
            numsweeps(stim) = fread(spkfid,1,'uint16');                     %Read in the number of sweeps to follow.
            for i = 1:numsweeps(stim)                                       %Step through each of the sweeps in the file.
                fseek(spkfid,8,'cof');                                      %Skip reading the timestamp for this sweep.
                order(end+1) = fread(spkfid,1,'uint16');                    %Read in the order of this stimulus in the recording.
                fseek(spkfid,4,'cof');                                      %Skip reading in the noise estimate.
                numspikes = fread(spkfid,1,'uint32');                       %Number of spikes.
                if i == 1 || export_order == 1                              %If this is the first sweep for this stimulus, or we're exporting the order.
                    for c = clusters                                        %Step through already-identified clusters.
                        if c ~= 0 || export_noise                           %If this cluster isn't the noise cluster or we're exporting the noise...
                            fwrite(f32fid(c+1),-2,'float32');               %Write a new stimulus indicator.
                            fwrite(f32fid(c+1),1000*sweeplength(stim),...
                                'float32');                                 %Write the sweeplength, in milliseconds.
                            fwrite(f32fid(c+1),numparams+1+export_order,...
                                'float32');                                 %Write the number of stimulus parameters to follow.
                            fwrite(f32fid(c+1),params(stim,:),'float32');   %Write the stimulus parameters.
                            if export_order == 1                            %If we're exporting the stimulus order...
                                fwrite(f32fid(c+1),order(end),'float32');   %Write the stimulus order.
                            end
                            fwrite(f32fid(c+1),spont_delay,'float32');      %Write the spontaneous recording delay.
                        end
                    end
                end
                for c = clusters'                                           %Step through each cluster.
                    if c ~= 0 || export_noise                               %If this cluster isn't the noise cluster or we're exporting the noise...
                        fwrite(f32fid(c+1), -1, 'float32');                 %Write a new sweep indicator.
                    end
                end
                for j = 1:numspikes                                         %Step through each spike in the sweep.
                    time = single(fread(spkfid,1,'float32'));               %Grab the spike time.
                    c = uint8(fread(spkfid,1,'uint8'));                     %Grab the cluster number.
                    if ~any(c == clusters) && c <= 25                       %If this cluster isn't already included, include it.
                        clusters(1,end+1) = c;                              %Add this cluster to the cluster list.
                        if c ~= 0 || export_noise                           %If it's not a noise cluster or if we're exporting noise...
                            newfile = [file(1:length(file)-4) '_' ...
                                char(65+c) '.f32'];                         %Make a new file for this cluster.
                            f32fid(c+1) = fopen(newfile,'w');               %Keep track of the file identifiers as an array.
                            n = 0;                                          %Make a counter to count through the stimulus order.
                            for k = 1:stim                                  %Step through all of the previously loaded stimuli.
                                temp = numsweeps(k);                        %Grab the number of sweeps for each previously loaded stimulus.
                                if k == stim                                %For the present stimulus...
                                    temp = i;                               %Only iterate through the sweeps that have already been checked.
                                end
                                for m = 1:temp                              %Step through each sweep of the previously loaded stimuli
                                    if m == 1 || export_order == 1          %If this is the first sweep for this stimulus, or we're exporting the order.
                                        fwrite(f32fid(c+1),-2,'float32');   %Write a new stimulus indicator.
                                        fwrite(f32fid(c+1),...
                                            1000*sweeplength(k),'float32'); %Write the sweeplength, in milliseconds.
                                        fwrite(f32fid(c+1),...
                                            numparams+1+export_order,...
                                            'float32');                     %Write the number of stimulus parameters to follow.
                                        fwrite(f32fid(c+1),params(k,:),...
                                            'float32');                     %Write the stimulus parameters.
                                        if export_order == 1                %If we're exporting the stimulus order...
                                            n = n + 1;                      %Advance the order counter.
                                            fwrite(f32fid(c+1),...
                                                order(n),'float32');        %Write the stimulus order.
                                        end
                                        fwrite(f32fid(c+1),spont_delay,...
                                            'float32');                     %Write the spontaneous recording delay.
                                    end
                                    fwrite(f32fid(c+1), -1, 'float32');     %Write a new sweep indicator.
                                end
                            end
                        end
                    end
                    if (c ~= 0 || export_noise) && c <= 25                  %If this isn't a noise spike or we're exporting noise...
                        fwrite(f32fid(c+1), time, 'float32');               %Write the spike time, in milliseconds.
                    end
                    fseek(spkfid,4*num_spike_samples,'cof');                %Skip reading in the spike shape.
                end
            end
        end
    catch
        warning(['Error in reading sweep ' num2str(i) ' for this file, stopping file read at last complete sweep.']); %#ok<WNTAG>
    end
end
if ~any(clusters == 0)                                                      %If there's no noise spikes.
    clusters(end+1) = 0;                                                    %Add the noise cluster identifier to the matrix just to keep things square.
end
if length(clusters) == 1                                                    %If there weren't any non-noise spikes in the file...
    disp('-----> Only a noise cluster.');                                   %Tell the user there was only a noise cluster.
elseif length(clusters) == 2                                                %If there was only one non-noise cluster in the file...
    disp(['-----> ' num2str(length(clusters)-1) ' cluster.']);              %Tell the user there was one non-noise cluster.
else                                                                        %Otherwise, if there were multiple non-noise clusters in the file...
    disp(['-----> ' num2str(length(clusters)-1) ' clusters.']);             %Tell the user how many clusters there were.
end

%Finally, close all the binary files, the *.f32 files and the *.SPK file.
for c = clusters'                                                           %Step through each spike cluster.
    if c ~= 0 || export_noise                                               %If it's not a noise cluster or if we're exporting noise...
        fclose(f32fid(c+1));                                                %Close the *.f32 file.
    end
end
fclose(spkfid);                                                             %Close the *.SPK file.