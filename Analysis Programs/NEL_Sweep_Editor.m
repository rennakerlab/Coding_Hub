function NEL_Sweep_Editor

handles = Make_GUI;                                                         %Call the subfunction to make the GUI.

%Initialize some variables here where they'll be easier to find and change.
if exist('Y:\Neural Recordings\','dir')                                     %If this computer has access to the Y: drive...
    handles.path = 'Y:\Neural Recordings\';                                 %Set the default path to the Y: drive's Neural Recordings folder.
else                                                                        %Otherwise...
    handles.path = [];                                                      %Create a field to hold the default path.
end
handles.file = [];                                                          %Create a field to hold the current file.
handles.fid = [];                                                           %Create a field to hold the file identifier.
handles.ylim = [];                                                          %Create a field to hold the y-axis limits.
handles.last_key = [];                                                      %Create a field to hold the last keys pressed.
  
%Set call backs for the various uicontrols and KeyPress events on the GUI.
set(handles.loadbutton,'callback',@LoadFile);                               %Set the callback for the load *.NEL button.
set(handles.upbutton,'callback',{@Switch_Sweep,1});                         %Set the callback for the up sweep button.
set(handles.downbutton,'callback',{@Switch_Sweep,-1});                      %Set the callback for the down sweep button.
set(handles.lockbutton,'callback',@Lock_Axes);                              %Set the callback for the lock axes button.
set(handles.togglebutton,'callback',@Toggle_Inclusion);                     %Set the callback for the toggle inclusion/exclusion button.
set(handles.savebutton,'callback',@SaveData);                               %Set the callback for the data resave button.
set(handles.editsweep,'callback',@Enter_Sweep);                             %Set the callback for the sweep editbox.
set(handles.savebutton,'callback',@ResaveFile);                             %Set the callback for the re-save button.

%Save the handles structure to the GUI.
guidata(handles.mainfig,handles);                                           %Pin the handles structure to the main figure.


%% This function is called when the user presses the Load *.NEL button.
function LoadFile(hObject,~)
handles = guidata(hObject);                                                 %Grab the handles structure from the main figure.
[file path] = uigetfile([handles.path '*.NEL']);                            %Have the user grab an *.NEL file.
if file(1) ~= 0 && ~strcmpi([path file],[handles.path handles.file])        %If the user picked a new file...
    handles.path = path;                                                    %Save the path for this file as the current path.
    handles.file = file;                                                    %Save the filename in the handles structure.
    set(handles.editfile,'string',file,'horizontalalignment','left');       %Show the new filename in the filename editbox.
    if ~isempty(handles.fid)                                                %If a file is already open for reading...
        fclose(handles.fid);                                                %Close the previous file.
    end
    fid = fopen([path file],'r');                                           %Open the selected file for reading.
    fseek(fid,1,'bof');                                                     %Skip reading in the daycode.
    n = fread(fid,1,'int8');                                                %Read in the number of characters in the rat's name.
    fseek(fid,n+2,'cof');                                                   %Skip reading in the rat's name and spontaneous rate measurement delay.
    handles.sampling_rate = fread(fid,1,'float32');                         %Read in the sampling rate, in Hz.
    numparams = fread(fid,1,'int8');                                        %Read in the number of stimulus parameters.
    for i = 1:numparams                                                     %Step through the stimulus parameters.
        n = fread(fid,1,'int16');                                           %Read in the number of characters in each parameter name.
            fseek(fid,n,'cof');                                             %Skip reading in each parameter name.
    end
    pos = ftell(fid);                                                       %Find the current position in the file.
    numsweeps = 0;                                                          %Create a counter to count the number of sweeps.
    while ~feof(fid)                                                        %Loop until the end of the file.
        i = fread(fid,1,'int16');                                           %Read in the stimulus index.
        if ~isempty(i) && i > 0                                             %If a stimulus index exists...
            numsweeps = numsweeps + 1;                                      %Increment the sweep counter.
            fseek(fid,12+4*numparams,'cof');                                %Skip the timestamp, parameter values, and sweeplength.
            n = fread(fid,1,'uint32');                                      %Read in the number of samples in the following signal.
            fseek(fid,4*n,'cof');                                           %Skip reading in the signal.
        end
    end
    handles.include = ones(1,numsweeps);                                    %Create a field for tracking which sweeps to include in the new file.
    handles.indices = zeros(numsweeps,3);                                   %Create a field for storing the file positions and number of samples for each sweep.
    fseek(fid,pos,'bof');                                                   %Rewind the file to just before the first stimulus.
    numsweeps = 0;                                                          %Reset the file counter.
    while ~feof(fid)                                                        %Loop until the end of the file.
        i = fread(fid,1,'int16');                                           %Read in the stimulus index.
        if ~isempty(i) && i > 0                                             %If a stimulus index exists...
            numsweeps = numsweeps + 1;                                      %Increment the sweep counter.
            fseek(fid,12+4*numparams,'cof');                                %Skip the timestamp, parameter values, and sweeplength.
            n = fread(fid,1,'uint32');                                      %Read in the number of samples in the following signal.
            handles.indices(numsweeps,1) = ftell(fid);                      %Save the file position at the start of this sweep.
            handles.indices(numsweeps,2:3) = n;                             %Save the number of samples in this sweep.
            fseek(fid,4*n,'cof');                                           %Skip reading in the signal.
        end
    end
    handles.fid = fid;                                                      %Save the file identifier in the handles structure.
    handles.cur_sweep = 1;                                                  %Set the current sweep to sweep 1.
    handles.ylim = [];                                                      %Set the ylim field to empty to enable auto-setting.
    set(handles.edittotal,'string',['/' num2str(numsweeps)],...
        'enable','inactive');                                               %Show the total number of sweep in the appropriate editbox.
    set(handles.editsweep,'enable','on');                                   %Make the current sweep editbox inactive.
    set(handles.savebutton,'enable','on');                                  %Enable the save button.
    set(handles.togglebutton,'enable','on');                                %Enable the toggle inclusion/exclusion button.
    set(handles.lockbutton,'enable','on');                                  %Enable the lock axes button.
    [b,a] = ellip(2,0.1,40,[825 4500]*2/handles.sampling_rate);             %Generate the filter coefficients for the passband filter.
    handles.filter_coefs = [b; a];                                          %Save the filter coefficients to the structure.
    i = length(num2str(numsweeps));                                         %Grab the maximum number of digits in a sweep number.
    handles.last_key = NaN(i,2);                                            %Create a field to track the last keypresses.
    handles = Load_Sweep(handles);                                          %Show the current sweep in the main axes.
    setKeyPressFcns(handles.mainfig,@KeyPress);                             %Disable all KeyPress functions for all uicontrols.
    set(handles.mainfig,'WindowButtonDownFcn',{@MouseClick,handles.axes});  %Set the mouse click function.
    set(handles.mainfig,'WindowButtonMotionFcn',...
        {@MouseHover,handles.axes});                                        %Set the callback for mouse motion over the axes.
    guidata(handles.mainfig,handles);                                       %Pin the handles structure to the main figure.
end


%% This function is called for any KeyPress on the GUI.
function KeyPress(hObject,eventdata)
if any(strcmpi(eventdata.Key,...
        {'leftarrow','rightarrow','downarrow','uparrow','space'})) || ...
        any(eventdata.Key(end) == '0123456789')                             %If any of the arrow keys, the space bar, or number keys were pressed.
    handles = guidata(hObject);                                             %Grab the handles structure from the main figure.
    if strcmpi(eventdata.Key,'leftarrow')                                   %If the user pressed the left arrow...
        handles.cur_sweep = handles.cur_sweep - 1;                          %Increment the current sweep down by 1.
        handles = Load_Sweep(handles);                                      %Load the preceding sweep.
    elseif strcmpi(eventdata.Key,'rightarrow')                              %If the user pressed the right arrow...
        handles.cur_sweep = handles.cur_sweep + 1;                          %Increment the current sweep up by 1.
        handles = Load_Sweep(handles);                                      %Load the following sweep.
    elseif strcmpi(eventdata.Key,'uparrow')                                 %If the user pressed the up arrow...
        handles.include(handles.cur_sweep) = 1;                             %Mark this sweep as included.
        if handles.indices(handles.cur_sweep,3) == ...
                handles.indices(handles.cur_sweep,2)                        %If the sweep isn't truncated...
            set(handles.txt_include,'string','INCLUDED',...
                'backgroundcolor',[0.5 1 0.5]);                             %Indicate that this sweep is fully included in the axes' text object.
        else                                                                %Otherwise, if the sweep is truncated...
            set(handles.txt_include,'string','INCLUDED (TRUNCATED)',...
                'backgroundcolor',[0.5 1 0.5]);                             %Indicate that this sweep is included, but truncated, in the axes' text object.
        end
        set(handles.togglebutton,'string','Exclude Sweep');                 %Change the string on the toggle inclusion button.
    elseif strcmpi(eventdata.Key,'downarrow')                               %If the user pressed the down arrow...
        handles.include(handles.cur_sweep) = 0;                             %Mark this sweep as excluded.
        set(handles.txt_include,'string','EXCLUDED',....
            'backgroundcolor',[1 0.5 0.5]);                                 %Indicate that this sweep is included in the axes' text object.
        set(handles.togglebutton,'string','Include Sweep');                 %Change the string on the toggle inclusion button.
    elseif strcmpi(eventdata.Key,'space')                                   %If the user pressed the space bar...
        if isempty(handles.ylim)                                            %If the y-axes aren't currently locked...
            handles.ylim = get(handles.axes,'ylim');                        %Grab the current y-axes limits to use on all subsequent plots.
            set(handles.lockbutton,'string','Unlock Y-Axis');               %Change the string on the lock axes button.
        else                                                                %Otherwise, if the y-axes are currently locked...
            handles.ylim = [];                                              %Set the ylim field to empty to enable auto-setting.
            set(handles.lockbutton,'string','Lock Y-Axis');                 %Change the string on the lock axes button.
            handles = Load_Sweep(handles);                                  %Reload the current sweep.
        end
    elseif any(eventdata.Key(end) == '0123456789')                          %If the user pressed a number key.
        handles.last_key(1:end-1,:) = handles.last_key(2:end,:);            %Shift the previously entered number down one.
        handles.last_key(end,:) = [eventdata.Key(end)-0, now];              %Save the key that was pressed and the time it was pressed.
        i = handles.last_key(:,2) > handles.last_key(end,2) - 3/86400;      %Grab only the keys that were pressed in the last 3 seconds.
        handles.cur_sweep = str2double(char(handles.last_key(i,1)'));       %Convert the last keypresses to a number.
        handles = Load_Sweep(handles);                                      %Load the specified sweep.
    end
    guidata(handles.mainfig,handles);                                       %Pin the handles structure to the main figure.
end


%% This function is called whenever the user presses a mouse button in the axes.
function MouseClick(hObject,~,h)
clicktype = get(hObject,'SelectionType');                                   %Grab mouse click selection type (left of right).
if ~any(strcmpi(clicktype,{'normal','alt'}))                                %If the mouse click wasn't a simple left or right click...
    return                                                                  %Skip execution of the rest of the function.
end
xy = get(h,'CurrentPoint');                                                 %Get the last mouse-clicked point from the main GUI axes.
xy = xy(1,1:2);                                                             %Pare down the x- and y-coordinates matrix.
a = [xlim, ylim];                                                           %Grab the x- and y-axis limits.
if xy(1) < a(1) || xy(1) > a(2) || xy(2) < a(3) || xy(2) > a(4)             %If the mouse was clicked outside the axes...
    return                                                                  %Skip execution of the rest of the function.
end
handles = guidata(hObject);                                                 %Grab the handles structure from the GUI.
xy(1) = round(xy(1)*handles.sampling_rate/1000);                            %Find the nearest sample index to the cut point.
if strcmpi(clicktype,'normal')                                              %If the left mouse button was clicked...
    handles.indices(handles.cur_sweep,3) = ...
        handles.indices(handles.cur_sweep,2);                               %Set the cut point to the number of samples in the sweep.
elseif strcmpi(clicktype,'alt')                                             %Otherwise, if the right mouse button was clicked...
    if xy(1) > 1                                                            %If the cut point is greater than the first sample...
        handles.indices(handles.cur_sweep,3) = xy(1);                       %Save the selected cut point for truncating the sweep.
    else                                                                    %Otherwise, if the cut point is less than or equal to the first sample...
        handles.indices(handles.cur_sweep,3) = ...
            handles.indices(handles.cur_sweep,2);                           %Set the cut point to the number of samples in the sweep.
        handles.include(handles.cur_sweep) = 0;                             %Mark this sweep as excluded.
        set(handles.txt_include,'string','EXCLUDED',....
            'backgroundcolor',[1 0.5 0.5]);                                 %Indicate that this sweep is included in the axes' text object.
        set(handles.togglebutton,'string','Include Sweep');                 %Change the string on the toggle inclusion button.
    end
end
handles = Load_Sweep(handles);                                              %Reload the current sweep.
guidata(hObject,handles);                                                   %Pin the handles structrue back up to the GUI.
    

%% This function executes while the mouse hovers over the axes.
function MouseHover(hObject,~,h)
xy = get(h,'CurrentPoint');                                                 %Grab the current mouse position in the axes.
xy = xy(1,1:2);                                                             %Pare down the x-y coordinates matrix.
a = [xlim, ylim];                                                           %Grab the x- and y-axis limits.
if xy(1) >= a(1) || xy(1) <= a(2) || xy(2) >= a(3) || xy(2) <= a(4)         %If the mouse was clicked outside the axes...
    set(hObject,'pointer','fullcross');                                     %Set the mouse pointer to an arrow cross.
else                                                                        %Otherwise...
    set(hObject,'pointer','arrow');                                         %Set the mouse pointer to the normal arrow.
end


%% This function is called for any KeyPress on the GUI.
function Toggle_Inclusion(hObject,~)
handles = guidata(hObject);                                                 %Grab the handles structure from the main figure.
if handles.include(handles.cur_sweep) == 1                                  %If the current sweep is included...
	handles.include(handles.cur_sweep) = 0;                                 %Mark this sweep as excluded.
    set(handles.txt_include,'string','EXCLUDED',...
        'backgroundcolor',[1 0.5 0.5]);                                     %Indicate that this sweep is exlcuded in the axes' text object.
    set(handles.togglebutton,'string','Include Sweep');                     %Change the string on the toggle inclusion button.
else                                                                        %Otherwise...
    handles.include(handles.cur_sweep) = 1;                                 %Mark this sweep as included.
    set(handles.txt_include,'string','INCLUDED',...
        'backgroundcolor',[0.5 1 0.5]);                                     %Indicate that this sweep is included in the axes' text object.
    set(handles.togglebutton,'string','Exclude Sweep');                     %Change the string on the toggle inclusion button.
end
guidata(handles.mainfig,handles);                                           %Pin the handles structure to the main figure.


%% This function is called when the user presses the axes lock button.
function Lock_Axes(hObject,~)
handles = guidata(hObject);                                                 %Grab the handles structure from the main figure.
if isempty(handles.ylim)                                                    %If the y-axes aren't currently locked...
    handles.ylim = get(handles.axes,'ylim');                                %Grab the current y-axes limits to use on all subsequent plots.
    set(handles.lockbutton,'string','Unlock Y-Axis');                       %Change the string on the lock axes button.
else                                                                        %Otherwise, if the y-axes are currently locked...
    handles.ylim = [];                                                      %Set the ylim field to empty to enable auto-setting.
    set(handles.lockbutton,'string','Lock Y-Axis');                         %Change the string on the lock axes button.
    handles = Load_Sweep(handles);                                          %Reload the current sweep.
end
guidata(handles.mainfig,handles);                                           %Pin the handles structure to the main figure.


%% This function executes when the use presses the up or down sweep button.
function Switch_Sweep(hObject,~,i)
handles = guidata(hObject);                                                 %Grab the handles structure from the main figure.                                                   %If the user pressed the right arrow button...
handles.cur_sweep = handles.cur_sweep + i;                                  %Increment the current sweep up or down by what the user selected.
handles = Load_Sweep(handles);                                              %Load the selected sweep.
guidata(handles.mainfig,handles);                                           %Pin the handles structure to the main figure.


%% This function executes when the use presses the up or down sweep button.
function Enter_Sweep(hObject,~)
handles = guidata(hObject);                                                 %Grab the handles structure from the main figure.           
i = get(hObject,'string');                                                  %Grab the string property from the editbox.
i(i < 48 | i > 57) = [];                                                    %Kick out all non-numeric characters.
if ~isempty(i)                                                              %If there's any characters left in the string...
    handles.cur_sweep = str2double(i);                                      %Set the current sweep to whatever the user entered.
    handles = Load_Sweep(handles);                                          %Load the selected sweep.
    guidata(handles.mainfig,handles);                                       %Pin the handles structure to the main figure.
else                                                                        %Otherwise...
    set(hObject,'string',num2str(handles.cur_sweep));                       %Reset the string in the editbox to the current sweep index.
end


%% This function shows the current sweep in the axes.
function handles = Load_Sweep(handles)
set(handles.upbutton,'enable','on');                                        %Enable the up-step button.
set(handles.downbutton,'enable','on');                                      %Enable the down-step button.
if handles.cur_sweep <= 1                                                   %If the current sweep index is less than or equal to 1...
    handles.cur_sweep = 1;                                                  %Set the current sweep to 1.
    set(handles.downbutton,'enable','off');                                 %Disable the down-step button.
elseif handles.cur_sweep >= size(handles.indices,1)                         %Otherwise, if the current sweep index is greater than the number of sweeps...
    handles.cur_sweep = size(handles.indices,1);                            %Set the current sweep to the last sweep.
    set(handles.upbutton,'enable','off');                                   %Disable the up-step button.
end
c = handles.cur_sweep;                                                      %Move the current sweep index to a less unwieldy variable.
set(handles.editsweep,'string',num2str(c));                                 %Show the current sweep number in the current sweep editbox.
fseek(handles.fid,handles.indices(c,1),'bof');                              %Move the file position in the *.NEL file to the correct position for the current sweep.
signal = fread(handles.fid,handles.indices(c,2),'float32');                 %Read in the sweep data.
signal = [repmat(signal(1),1,500), signal', repmat(signal(end),1,500)];     %Add 500 sample "tails" to the beginning and end of the signal.
signal = filtfilt(handles.filter_coefs(1,:),handles.filter_coefs(2,:),...
    double(signal));                                                        %Apply the passband filter to the signal.
signal = 1000000*signal(501:end-500);                                       %Remove the "tails" from the signal and convert it to microvolts.
set(handles.mainfig,'CurrentAxes',handles.axes);                            %Set the current axes to the main figure axes.
x = 1000*(1:handles.indices(c,2))/handles.sampling_rate;                    %Make x-coordinates in units of milliseconds.
if handles.indices(c,3) < handles.indices(c,2)                              %If the user's truncated this sweep...
    cla;                                                                    %Clear the main GUI axes.
    hold on;                                                                %Hold the axes for multiple plots.
    n = handles.indices(c,3);                                               %Grab the truncation cut point.
    plot(x(1:n),signal(1:n)','color',[0 0.5 0]);                            %Plot the kept signal for this sweep.
    plot(x(n+1:end),signal(n+1:end)','color',[0.5 0 0]);                    %Plot the truncated signal for this sweep.
    hold off;                                                               %Release the plot hold.
else                                                                        %Otherwise, if the sweep isn't truncated...
    plot(x,signal','color',[0 0.5 0]);                                      %Plot the signal for this sweep.
end
xlim([x(1),x(end)]);                                                        %Set the x-axis limits to squeeze close into the signal.
if isempty(handles.ylim)                                                    %If the y-axis limits aren't locked...
    temp = min([500, max(abs(signal))]);                                    %Set the y-axis limits to 10% more than the absolute maximum.
    temp(temp == 0) = 1;                                                    %If the signal is flat, set the axis limits to 1 uV.
    ylim([-1.1,1.1]*temp);                                                  %Set the y-axis limits to 10% more than the absolute maximum.
else                                                                        %Otherwise, if the y-axis limits are locked.
    ylim(handles.ylim);                                                     %Set the y-axis limits to the locked value.
end
temp = get(gca,'xtick');                                                    %Grab the x-axis ticks.        
for i = temp                                                                %Step through each of the x-axis ticks.
    line(i*[1,1],ylim,[-2,-2],'linestyle',':','color',[0.5 0.5 0.5]);       %Plot a grid line at each tick behind the main plot.
    t = text(i,0.97*min(ylim),-1,[num2str(i) ' ms'],'color','k',...
        'edgecolor','w','backgroundcolor','w','margin',2,...
        'horizontalalignment','center','verticalalignment','bottom');       %Label the grid line with text.
    pos = get(t,'extent');                                                  %Grab the position of the text object.
    if pos(1) < x(1) || pos(1) + pos(3) > x(end) ||...
            pos(2) < min(ylim) || pos(2) + pos(3) > max(ylim)               %If the text object sticks out past the axes boundaries...
        delete(t);                                                          %Delete it.
    end
end
temp = get(gca,'ytick');                                                    %Grab the y-axis ticks.        
for i = temp                                                                %Step through each of the x-axis ticks.
    line(xlim,i*[1,1],[-2,-2],'linestyle',':','color',[0.5 0.5 0.5]);       %Plot a grid line at each tick behind the main plot.
    t = text(0.01*(x(end)-x(1)),i,-1,[num2str(i) ' \muV'],'color','k',...
        'edgecolor','w','backgroundcolor','w','margin',1,...
        'horizontalalignment','left','verticalalignment','middle');         %Label the gridline with text.
    pos = get(t,'extent');                                                  %Grab the position of the text object.
    if pos(1) < x(1) || pos(1) + pos(3) > x(end) ||...
            pos(2) < min(ylim) || pos(2) + pos(4) > max(ylim)               %If the text object sticks out past the axes boundaries...
        delete(t);                                                          %Delete it.
    end
end
set(gca,'xticklabel',[],'yticklabel',[]);                                   %Get rid of the default axes labels.
handles.txt_include = text(0.99*(x(end)-x(1)),0.95*max(ylim),10,'-',...
    'verticalalignment','top','horizontalalignment','right',...
    'fontweight','bold','fontsize',20,'margin',3,'edgecolor','k');          %Create a text object to show inclusion/exclusion.
if handles.include(c) == 1                                                  %If this sweep is marked for inclusion...
    if handles.indices(c,3) == handles.indices(c,2)                         %If the sweep isn't truncated...
        set(handles.txt_include,'string','INCLUDED',...
            'backgroundcolor',[0.5 1 0.5]);                                 %Indicate that this sweep is fully included in the axes' text object.
    else                                                                    %Otherwise, if the sweep is truncated...
        set(handles.txt_include,'string','INCLUDED (TRUNCATED)',...
            'backgroundcolor',[0.5 1 0.5]);                                 %Indicate that this sweep is included, but truncated, in the axes' text object.
    end
    set(handles.togglebutton,'string','Exclude Sweep');                     %Change the string on the toggle inclusion button.
else                                                                        %Otherwise, if this sweep is marked for exclusion...
    set(handles.txt_include,'string','EXCLUDED',....
        'backgroundcolor',[1 0.5 0.5]);                                     %Indicate that this sweep is included in the axes' text object.
    set(handles.togglebutton,'string','Include Sweep');                     %Change the string on the toggle inclusion button.
end
if handles.indices(c,3) < handles.indices(c,2)                              %If the user's truncated this sweep...
    n = 1000*n/handles.sampling_rate;                                       %Convert the cut point from samples to milliseconds.
    line(n*[1,1],ylim,[1,1],'linestyle','--','color',[0.5 0 0],...
        'linewidth',2);                                                     %Plot a line at the cut point.
    text(n,0.75*min(ylim),1,'DISCARDED \rightarrow',...
        'verticalalignment','middle','horizontalalignment','center',...
        'fontweight','bold','fontsize',14,'margin',3,...
        'edgecolor',[0.5 0 0],'backgroundcolor','w','linewidth',2);                       %Create a text object to show what's discarded.
end


%% This function creates the main figure and populates the uicontrols.
function handles = Make_GUI

%Set the common properties of subsequent uicontrols.
fontsize = 14;                                                              %Set the fontsize for all uicontrols.
uheight = 1;                                                                %Set the height of all editboxes and listboxes, in centimeters
label_color = [0.7 0.7 0.9];                                                %Set the color for all labels.

%Create the main figure.
set(0,'units','centimeters');                                               %Set the default units to centimeters.
pos = get(0,'screensize');                                                  %Grab the default position of the new figure.
pos(1) = 0.95*pos(3);                                                       %Set the width of the figure to almost the width of the screen.
pos(2) = 0.3 + uheight + pos(1)/4;                                          %Scale the height of the figure to about 1/4 of the width.
pos = [pos(3)/2-pos(1)/2 pos(4)/2-pos(2)/2 pos(1) pos(2)];                  %Set position and dimensions of the new figure.
handles.mainfig = figure('units','centimeter',...
    'Position',pos,...
    'MenuBar','none',...
    'numbertitle','off',...
    'resize','off',...
    'name','NEL Sweep Editor');                                             %Set the properties of the main figure.
        
%Create labels and a load button for the file name.
uicontrol(handles.mainfig,'style','edit',...
    'enable','inactive',...
    'string','File:',...
    'units','centimeters',...
    'position',[0.1, 0.1, 1.3, uheight],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','right',...
    'backgroundcolor',label_color);                                         %Make a static text label for the filename.
handles.editfile = uicontrol(handles.mainfig,'style','edit',...
    'string','(no file loaded)',...
    'enable','inactive',...
    'units','centimeters',...
    'position',[1.4 0.1, pos(3)-25.5, uheight],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','center',...
    'backgroundcolor',[1 1 0.9]);                                           %Make an editbox for showing the current filename.
handles.loadbutton = uicontrol(handles.mainfig,'style','pushbutton',...
    'string','Load *.NEL',...
    'units','centimeters',...
    'position',[pos(3)-24, 0.1, 4, uheight],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','center',...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a pushbutton for re-saving the file.

%Create a button for toggling the current sweep between included and excluded.
handles.lockbutton = uicontrol(handles.mainfig,'style','pushbutton',...
    'string','Lock Y-Axis',...
    'enable','off',...
    'units','centimeters',...
    'position',[pos(3)-19.8, 0.1, 4, uheight],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','center',...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a pushbutton for toggling sweeps between included and excluded.

%Create a button for toggling the current sweep between included and excluded.
handles.togglebutton = uicontrol(handles.mainfig,'style','pushbutton',...
    'string','Exclude Sweep',...
    'enable','off',...
    'units','centimeters',...
    'position',[pos(3)-15.6, 0.1, 5, uheight],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','center',...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a pushbutton for toggling sweeps between included and excluded.

%Create buttons and a label for stepping through the sweeps.
handles.downbutton = uicontrol(handles.mainfig,'style','pushbutton',...
    'string','<',...
    'enable','off',...
    'units','centimeters',...
    'position',[pos(3)-10.4, 0.1, 1, uheight],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','center',...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a button to increment down one sweep.
handles.editsweep = uicontrol(handles.mainfig,'style','edit',...
    'enable','off',...
    'string','---',...
    'units','centimeters',...
    'position',[pos(3)-9.35, 0.1, 1.5, uheight],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','right',...
    'backgroundcolor','w');                                                 %Make a label for the current sweep.
handles.edittotal = uicontrol(handles.mainfig,'style','edit',...
    'enable','off',...
    'string','/---',...
    'units','centimeters',...
    'position',[pos(3)-7.85, 0.1, 2, uheight],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','left',...
    'backgroundcolor',[0.9 0.9 0.9]);                                       %Make a label for the total number of sweeps pushbutton.
handles.upbutton = uicontrol(handles.mainfig,'style','pushbutton',...
    'enable','off',...
    'string','>',...
    'units','centimeters',...
    'position',[pos(3)-5.8, 0.1, 1, uheight],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','center',...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a button to increment up one sweep.

%Create a button for re-saving the NEL file.
handles.savebutton = uicontrol(handles.mainfig,'style','pushbutton',...
    'enable','off',...
    'string','Re-Save *.NEL',...
    'units','centimeters',...
    'position',[pos(3)-4.6, 0.1, 4.5, uheight],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','center',...
    'backgroundcolor',get(handles.mainfig,'color'));                        %Make a pushbutton for re-saving the file.

%Create axes for showing the recording sweeps.
handles.axes = axes('parent',handles.mainfig,...
    'units','centimeters',...
    'position',[0.1 0.2+uheight pos(3)-0.2 pos(4)-uheight-0.3],...
    'box','on',...
    'xtick',[],...
    'ytick',[]);                                                            %Create the status graph axes.


%% This function is called when the user presses the Re-Save *.NEL button.
function ResaveFile(hObject,~)
handles = guidata(hObject);                                                 %Grab the handles structure from the main figure.
newfilename = [handles.file(1:end-4) '_EDITED.NEL'];                        %Add the word "EDITED" to the end of the filename.
[file path] = uiputfile([handles.path newfilename],'Save Edited File');     %Have the user specify the filename and where it'll be saved.
if file(1) == 0                                                             %If the user didn't set a new filename...
    return                                                                  %Skip the rest of the function.
end
oldfid = handles.fid;                                                       %Grab the old file's identifier.
fseek(oldfid,0,'bof');                                                      %Rewind the original file.
newfid = fopen([path file],'w');                                            %Open a new *.NEL file for writing.
fwrite(newfid,fread(oldfid,1,'int8'),'int8');                               %Write the daycode.
n = fread(oldfid,1,'int8');                                                 %Grab the number of characters in the rat's name.
fwrite(newfid,n,'int8');                                                    %Write the number of characters in the rat's name.
fwrite(newfid,fread(oldfid,n,'uchar'),'uchar');                             %Write the rat's name.
fwrite(newfid,fread(oldfid,1,'int16'),'int16');                             %Write the spontaneous rate measurement delay.
fwrite(newfid,fread(oldfid,1,'float32'),'float32');                         %Write the sampling rate.
numparams = fread(oldfid,1,'int8');                                         %Grab the number of stimulus parameters.
fwrite(newfid,numparams,'int8');                                            %Write the number of stimulus parameters.
for i = 1:numparams                                                         %Step through the stimulus parameters.
    n = fread(oldfid,1,'int16');                                            %Grab the number of characters in each parameter name.
    fwrite(newfid,n,'int16');                                               %Write the number of characters in each parameter name.
    fwrite(newfid,fread(oldfid,n,'uchar'),'uchar');                         %Write the parameter name.
end
while ~feof(oldfid)                                                         %Loop until the end of the original file.
    i = fread(oldfid,1,'int16');                                            %Read in the stimulus index.
    if ~isempty(i) && i > 0                                                 %If a valid stimulus index was read...
        if handles.include(i) == 1                                          %If we're including this sweep...
            disp(i);
            fwrite(newfid,i,'int16');                                       %Write the stimulus index.
            fwrite(newfid,fread(oldfid,1,'float64'),'float64');             %Write the timestamp.
            fwrite(newfid,fread(oldfid,numparams,'float32'),'float32');     %Write the parameter values.
            if handles.indices(i,2) == handles.indices(i,3)                 %If the sweep isn't truncated...
                fwrite(newfid,fread(oldfid,1,'float32'),'float32');         %Write the sweeplength.
                n = fread(oldfid,1,'uint32');                               %Grab the number of samples in the signal.
                fwrite(newfid,n,'uint32');                                  %Write the number of samples in the signal.
                fwrite(newfid,fread(oldfid,n,'float32'),'float32');         %Write the samples of the signal.
            else                                                            %Otherwise, if the sweep is truncated...
                s = double(fread(oldfid,1,'float32'));                      %Read in the old sweeplength.
                n = double(fread(oldfid,1,'uint32'));                       %Grab the number of samples in the old signal.
                s = handles.indices(i,3)*s/n;                               %Adjust the sweeplength to the new truncated length.
                fwrite(newfid,s,'float32');                                 %Write the new sweeplength.
                fwrite(newfid,handles.indices(i,3),'uint32');               %Write the number of samples in the truncated signal.
                signal = fread(oldfid,n,'float32');                         %Read in the old signal.
                fwrite(newfid,signal(1:handles.indices(i,3)),'float32');    %Write the samples of the truncated signal.
            end
        else                                                                %Otherwise, if we're not including this sweep...
            fseek(oldfid,12+4*numparams,'cof');                             %Skip the timestamp, parameter values, and sweeplength.
            n = fread(oldfid,1,'uint32');                                   %Read in the number of samples in the following signal.
            fseek(oldfid,4*n,'cof');                                        %Skip reading in the signal.
        end
    end
end
fclose(newfid);                                                             %Close the edited *.NEL file.
set(handles.mainfig,'CurrentAxes',handles.axes);                            %Set the current axes to the main figure axes.
text(mean(xlim),mean(ylim),1,'Edited File Saved','fontweight','bold',...
    'edgecolor','k','backgroundcolor','w','margin',5,'fontsize',36,...
    'horizontalalignment','center','verticalalignment','middle');           %Show a saved label.